$date
	Mon Jul 10 15:50:02 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TB $end
$var wire 64 ! S [63:0] $end
$var wire 1 " Cout $end
$var reg 64 # A [63:0] $end
$var reg 64 $ B [63:0] $end
$var reg 1 % Cin $end
$scope module UUT $end
$var wire 64 & A [63:0] $end
$var wire 64 ' B [63:0] $end
$var wire 1 % Cin $end
$var wire 64 ( S [63:0] $end
$var wire 1 " Cout $end
$var wire 1 ) C7 $end
$var wire 1 * C6 $end
$var wire 1 + C5 $end
$var wire 1 , C4 $end
$var wire 1 - C3 $end
$var wire 1 . C2 $end
$var wire 1 / C1 $end
$scope module CLA1 $end
$var wire 8 0 A [7:0] $end
$var wire 8 1 B [7:0] $end
$var wire 1 % Cin $end
$var wire 1 / Cout $end
$var wire 8 2 G [7:0] $end
$var wire 8 3 P [7:0] $end
$var wire 8 4 S [7:0] $end
$var wire 8 5 C [7:0] $end
$upscope $end
$scope module CLA2 $end
$var wire 8 6 A [7:0] $end
$var wire 8 7 B [7:0] $end
$var wire 1 / Cin $end
$var wire 1 . Cout $end
$var wire 8 8 G [7:0] $end
$var wire 8 9 P [7:0] $end
$var wire 8 : S [7:0] $end
$var wire 8 ; C [7:0] $end
$upscope $end
$scope module CLA3 $end
$var wire 8 < A [7:0] $end
$var wire 8 = B [7:0] $end
$var wire 1 . Cin $end
$var wire 1 - Cout $end
$var wire 8 > G [7:0] $end
$var wire 8 ? P [7:0] $end
$var wire 8 @ S [7:0] $end
$var wire 8 A C [7:0] $end
$upscope $end
$scope module CLA4 $end
$var wire 8 B A [7:0] $end
$var wire 8 C B [7:0] $end
$var wire 1 - Cin $end
$var wire 1 , Cout $end
$var wire 8 D G [7:0] $end
$var wire 8 E P [7:0] $end
$var wire 8 F S [7:0] $end
$var wire 8 G C [7:0] $end
$upscope $end
$scope module CLA5 $end
$var wire 8 H A [7:0] $end
$var wire 8 I B [7:0] $end
$var wire 1 , Cin $end
$var wire 1 + Cout $end
$var wire 8 J G [7:0] $end
$var wire 8 K P [7:0] $end
$var wire 8 L S [7:0] $end
$var wire 8 M C [7:0] $end
$upscope $end
$scope module CLA6 $end
$var wire 8 N A [7:0] $end
$var wire 8 O B [7:0] $end
$var wire 1 + Cin $end
$var wire 1 * Cout $end
$var wire 8 P G [7:0] $end
$var wire 8 Q P [7:0] $end
$var wire 8 R S [7:0] $end
$var wire 8 S C [7:0] $end
$upscope $end
$scope module CLA7 $end
$var wire 8 T A [7:0] $end
$var wire 8 U B [7:0] $end
$var wire 1 * Cin $end
$var wire 1 ) Cout $end
$var wire 8 V G [7:0] $end
$var wire 8 W P [7:0] $end
$var wire 8 X S [7:0] $end
$var wire 8 Y C [7:0] $end
$upscope $end
$scope module CLA8 $end
$var wire 8 Z A [7:0] $end
$var wire 8 [ B [7:0] $end
$var wire 1 ) Cin $end
$var wire 1 " Cout $end
$var wire 8 \ G [7:0] $end
$var wire 8 ] P [7:0] $end
$var wire 8 ^ S [7:0] $end
$var wire 8 _ C [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
0/
0.
0-
0,
0+
0*
0)
b0 (
b0 '
b0 &
0%
b0 $
b0 #
0"
b0 !
$end
#10
b1 !
b1 (
b1 4
b1 3
b1 0
b1 #
b1 &
#20
b1 L
b1 M
1,
1-
b11100001 G
b1 :
b10000000 4
b1110000 @
b100001001011100000000000110000000 !
b100001001011100000000000110000000 (
b1001 F
b1 9
b10000000 3
b1110000 ?
b10000000 >
b11101000 E
b10000 D
b1 7
b10000000 =
b11110000 C
b10000000 0
b11110000 <
b11000 B
b11110000100000000000000100000000 $
b11110000100000000000000100000000 '
b11000111100000000000010000000 #
b11000111100000000000010000000 &
#30
1"
0-
b0 L
b0 M
0,
b0 G
b11110000 _
b0 :
b0 4
b0 @
b0 F
b11011100000000000000000000000000000000000000000000000000000000 !
b11011100000000000000000000000000000000000000000000000000000000 (
b110111 ^
b0 9
b0 3
b0 ?
b0 >
b0 E
b0 D
b11000111 ]
b111000 \
b0 7
b0 =
b0 C
b111111 [
b0 0
b0 <
b0 B
b11111000 Z
b11111100000000000000000000000000000000000000000000000000000000 $
b11111100000000000000000000000000000000000000000000000000000000 '
b1111100000000000000000000000000000000000000000000000000000000000 #
b1111100000000000000000000000000000000000000000000000000000000000 &
#60
